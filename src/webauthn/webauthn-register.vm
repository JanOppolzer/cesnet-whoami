##
## Velocity Template for displaying the WebAuthn user crential registration view
##
## Velocity context will contain the following properties
## flowExecutionUrl - the form action location
## flowRequestContext - the Spring Web Flow RequestContext
## flowExecutionKey - the SWF execution key (this is built into the flowExecutionUrl)
## profileRequestContext - root of context tree
## webauthnRegContext = WebAuthn registration context
## encoder - HTMLEncoder class
## webAuthnEncoder - WebAuthnEncoder class
## request - HttpServletRequest
## response - HttpServletResponse
## environment - Spring Environment object for property resolution
## custom - arbitrary object injected by deployer
## registrationInfoMessageFunction - function to produce information message for form
## registrationErrorMessageFunction - function to produce error message for form
##
#set ($debug = $environment.getProperty("idp.authn.webauthn.ui.debug", "false"))

## Add CSP directives
#set ($areYouSure =  "return confirm('#springMessageText('idp.webauthn.register.credential.remove.confirm', 'Are you sure')');")
#set ($nonce = $cspNonce.generateIdentifier())
$response.addHeader("Content-Security-Policy", "default-src 'none'; style-src 'self'; img-src 'self' data:; script-src-elem 'nonce-$nonce'; script-src-attr 'unsafe-hashes' 'sha256-$cspDigester.apply($areYouSure)'")

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="refresh" content="300;url=$flowExecutionUrl&_eventId=finish#parse("csrf/csrf-qparam.vm")">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>#springMessageText("idp.title", "Web Login Service")</title>
  <script type="text/javascript" src="$request.getContextPath()/js/webauthn/webauthn-support.js" #if ($nonce)nonce="$nonce"#end></script>
  <link rel="stylesheet" href="$request.getContextPath()/css/app.css" />
  <script type="module" #if ($nonce)nonce="$nonce"#end>
         import {
           parseCreationOptionsFromJSON,
           create,
           supported,
         }  from "$request.getContextPath()/js/webauthn/webauthn-json.browser-ponyfill.min.js";

         async function register() {
             clearMessages();
             var pkCredOptions = $webAuthnEncoder.serializePublicKeyCredentialOptionsAsJSON($webauthnRegContext.publicKeyCredentialCreationOptions);
             var pkCredOptionsParsed = parseCreationOptionsFromJSON(pkCredOptions);
             await create(pkCredOptionsParsed)
                     .then(function (publicKeyCredentialAttestation) {
                         var nickname = prompt('#springMessageText("idp.webauthn.register.credential.nickname", "Credential Nickname")');
                         document.getElementById("credentialNickname").value = nickname;
                         document.getElementById("publicKeyCredential").value = JSON.stringify(publicKeyCredentialAttestation);
                         document.getElementById("registrationSubmit").click();
                     }).catch(function (err) {
                         console.error(err);
                         document.getElementById("error_div").classList.remove('hidden')
                         document.getElementById("error_message").innerHTML = err.message;
                     });
          };

          function clearMessages() {
             if(document.getElementById('error_div') != null) {
                document.getElementById('error_div').classList.add('hidden');
             }

             if (document.getElementById('reg-error-outcome') != null) {
                document.getElementById('reg-error-outcome').classList.add('hidden');
             }

             if (document.getElementById('reg-success-outcome') != null) {
                document.getElementById('reg-success-outcome').classList.add('hidden');
             }
          }

          function initButton() {
               document.getElementById("registerButton").onclick = register;
               return false;
          }

          window.addEventListener("load", () => {
                 try {
                   var isSupported = supported();
                   if (!isSupported) {
                     document.getElementById('supportedDiv').classList.add('hidden')
                     document.getElementById("supportedDiv").disabled = true;
                     document.getElementById("publicKeyCredentialAttestationForm").disabled = true;
                     document.getElementById("registrationSubmit").disabled = true;

                     document.getElementById("unsupportedDiv").disabled = false;
                     document.getElementById('unsupportedDiv').classList.remove('hidden')
                   } else {
                     initButton();
                   }

                 } catch (e) {
                 console.error(e);
                 }
          });
      </script>
</head>

<body class="sm:p-8 dark:sm:bg-gray-900 dark:bg-gray-800 sm:bg-gray-100 antialiased text-gray-700">
  <div class="max-w-screen-md mx-auto">
    <main class="sm:rounded-xl dark:bg-gray-800 dark:shadow-lightgrey dark:shadow-none sm:dark:shadow sm:border sm:shadow-md bg-white">

      <header class="sm:py-8 pb-4 border-b">
        <div class="flex items-center justify-center">
          <img class="h-28 dark:hidden" src="/idp/images/cesnet-light.svg" alt="CESNET logo">
          <img class="h-28 dark:inline-block hidden" src="/idp/images/cesnet-dark.svg" alt="CESNET logo">
        </div>
      </header>

      <section class="gap-y-8 sm:px-16 sm:py-8 text-darkgrey px-8 py-4">

        #set ($infoMessage = $registrationInfoMessageFunction.apply($profileRequestContext))
        #if ($infoMessage)
          <p id="reg-success-outcome" class="dark:text-gray-100 bg-green-400/20 shadow-green-400/20 text-darkgrey px-4 py-2 mb-2 text-green-700 border border-green-400 rounded-lg shadow">$encoder.encodeForHTML($infoMessage)</p>
        #end

        #set ($errorMessage = $registrationErrorMessageFunction.apply($profileRequestContext))
        #if ($errorMessage)
          <p id="reg-error-outcome" class="output-message output--error">$encoder.encodeForHTML($errorMessage)</p>
        #end

        <div class="border-cesnetred dark:text-gray-100 bg-cesnetred/20 shadow-cesnetred/20 text-darkgrey hidden px-4 py-2 mb-2 border rounded-lg shadow" id="error_div">
          <p id="error_message"></p>
        </div>

        #if ($webauthnRegContext.existingCredentials)
          <h1 class="sm:text-2xl text-darkgrey dark:text-white pb-8 text-xl font-bold text-center">#springMessageText("idp.webauthn.register.registered.keys","Registered keys for") '$encoder.encodeForHTML($webauthnRegContext.username)'</h1>

          <div class="pb-8">
            <table class="w-full pb-8 border-collapse">
              <tr class="dark:text-white border-b">
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.keyName", "Key Name")</th>
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.authenticatorDescription", "Authenticator")</th>
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.transports", "Transports")</th>
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.passkey", "Passkey?")</th>
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.registrationTime", "Registration Time")</th>
                  <th class="p-2 align-top">#springMessageText("idp.webauthn.register.table.header.action", "Action")</th>
              </tr>
              #foreach($cred in $webauthnRegContext.existingCredentials)
              <tr class="dark:text-white hover:bg-freshblue/10 border-b">
                  <td class="p-2">$encoder.encodeForHTML($cred.nickname)</td>
                  #if ($cred.authenticatorDescription)
                      <td class="p-2">
                      #if ($cred.icon)
                          <img class="authenticator-logo" src="$encoder.encodeForHTML($cred.icon) alt="authenticator-icon"/>
                      #end
                      $encoder.encodeForHTML($cred.authenticatorDescription)</td>
                  #else
                      <td class="p-2">#springMessageText("idp.webauthn.register.table.unknownCredential", "unknown")</td>
                  #end
                  <td class="p-2">$encoder.encodeForHTML($webAuthnEncoder.formatTransports($cred.transports))</td>
                  <td class="p-2">$encoder.encodeForHTML($webAuthnEncoder.formatDiscoverable($cred.isDiscoverable()))</td>
                  <td class="p-2">$encoder.encodeForHTML($webAuthnEncoder.formatInstant($cred.registrationTime))</td>
                  <td class="p-2">
                    <form id="delete_key_form" action="$flowExecutionUrl" method="post">
                        #parse("csrf/csrf.vm")
                        <input type="hidden" name="credentialId" value="$cred.credentialIdBase64Url"/>
                        <button class="bg-cesnetred/50 hover:bg-cesnetred px-6 py-3 font-bold text-white rounded-lg" onclick="$areYouSure" id="removeButton" type="submit" name="_eventId_deleteKey">
                      #springMessageText("idp.webauthn.register.credential.remove", "Remove")</button>
                    </form>
                  </td>
              </tr>
                #end
            </table>
          </div>
        #else
          <h1 class="sm:text-2xl text-darkgrey dark:text-white pb-8 text-xl font-bold text-center">#springMessageText("idp.webauthn.register.registered.noKeys", "You have no registered keys")</h1>
        #end

        <div class="sm:flex-row flex flex-col items-center justify-center gap-4">
            <button id="registerButton" class="bg-cesnetblue shadow-cesnetblue/60 hover:shadow-cesnetblue/40 hover:opacity-90 px-20 py-4 font-bold text-white rounded-lg shadow-md" type="submit">
                #springMessageText("idp.webauthn.register.addKey", "Add new security key")
            </button>

            <form id="finish_button_form" action="$flowExecutionUrl" method="post">
              #parse("csrf/csrf.vm")
              <button id="finish_button" class="bg-cesnetblue shadow-cesnetblue/60 hover:shadow-cesnetblue/40 hover:opacity-90 px-20 py-4 font-bold text-white rounded-lg shadow-md" type="submit" name="_eventId_finish">
                  #springMessageText("idp.webauthn.register.finish", "Finish")
              </button>
            </form>
        </div>

        <form id="publicKeyCredentialAttestationForm" action="$flowExecutionUrl" method="post">
          #parse("csrf/csrf.vm")
          <input type="hidden" id="credentialNickname" name="credentialNickname"/>
          <input type="hidden" id="publicKeyCredential" name="publicKeyCredential"/>
          <button class="hidden" id="registrationSubmit" type="submit" name="_eventId_addKey">#springMessageText("idp.webauthn.register.submit", "Submit Registration")</button>
        </form>

        #if($debug == "true")
          <hr>
          <button type="button" class="collapsible-debug">#springMessageText("idp.webauthn.debug.register.title", "Debugging")</button>
          <div class="debug" id="debug-div">
              <label for="publicKeyCredentialCreation">#springMessageText("idp.webauthn.debug.register.request", "Registration Options")</label>
              <textarea id="publicKeyCredentialCreation" name="publicKeyCredentialCreation" rows="20" cols="50">
              $webAuthnEncoder.serializePublicKeyCredentialOptionsAsJSON($webauthnRegContext.publicKeyCredentialCreationOptions)</textarea>
          </div>
        #end

        <div id="unsupportedDiv" class="hidden">
          #springMessageText("idp.webauthn.register.unsupported", "Your browser is not WebAuthn compatible")
        </div>

      </section>

      <footer class="p-2">
        <p class="text-lightgrey text-center">
          <small>
            &copy; 1996&mdash;2024
            <a target="_blank" class="hover:no-underline underline" href="https://www.cesnet.cz">CESNET</a>
          </small>
        </p>
      </footer>

    </main>
  </div>
</body>

</html>
